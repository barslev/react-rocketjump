(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{125:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),b=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=b(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},s=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,o=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=b(n),s=a,m=u["".concat(o,".").concat(s)]||u[s]||d[s]||c;return n?r.a.createElement(m,i(i({ref:t},l),{},{components:n})):r.a.createElement(m,i({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,o=new Array(c);o[0]=s;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var l=2;l<c;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},86:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return l}));var a=n(3),r=(n(0),n(125));const c={id:"reducer",title:"Reducer",sidebar_label:"Reducer",slug:"/reducer"},o={unversionedId:"reducer",id:"reducer",isDocsHomePage:!1,title:"Reducer",description:"Every RjObject has its own reducer that describe its internal state and how this",source:"@site/docs/reducer.md",slug:"/reducer",permalink:"/react-rocketjump/docs/next/reducer",editUrl:"https://github.com/inmagik/react-rocketjump/edit/master/website/docs/reducer.md",version:"current",sidebar_label:"Reducer",sidebar:"someSidebar",previous:{title:"RjObject",permalink:"/react-rocketjump/docs/next/rj-object"},next:{title:"Computed state and selectors",permalink:"/react-rocketjump/docs/next/computed-state-and-selectors"}},i=[{value:"Default reducer",id:"default-reducer",children:[]},{value:"Extending root reducer",id:"extending-root-reducer",children:[]},{value:"Adding new reducers",id:"adding-new-reducers",children:[]}],p={toc:i};function l({components:e,...t}){return Object(r.b)("wrapper",Object(a.a)({},p,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Every RjObject has its own reducer that describe its internal state and how this\nstate changes in response of actions."),Object(r.b)("h3",{id:"default-reducer"},"Default reducer"),Object(r.b)("p",null,"If you don't specify anything the default reducer crafted when creating a RjObject has this state shape:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"{\n  root: {\n    data: any\n    error: any\n    pending: boolean\n  }\n}\n")),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"When consuming an RjObject the default computed state is the state under ",Object(r.b)("strong",{parentName:"p"},"root")," key."))),Object(r.b)("p",null,"RocketJump use ",Object(r.b)("em",{parentName:"p"},"redux style actions"),":"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"interface Action<T extends string> {\n  type: T\n  [extraProps: string]: any\n}\n")),Object(r.b)("p",null,"The action types handled by this reducer are:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"PENDING"))),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"interface PendingAction {\n  type: 'PENDING'\n  meta: Record<string, any>\n}\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"PENDING")," action is dispatched when your ",Object(r.b)("strong",{parentName:"p"},"effect")," starts default root reducer implementation make ",Object(r.b)("em",{parentName:"p"},"pending")," ",Object(r.b)("inlineCode",{parentName:"p"},"true"),"."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"SUCCESS"))),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"interface SuccessAction {\n  type: 'SUCCESS'\n  payload: {\n    params: any[]\n    data: any\n  }\n  meta: Record<string, any>\n}\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"SUCCESS")," action is dispatched when your ",Object(r.b)("strong",{parentName:"p"},"effect")," ",Object(r.b)("em",{parentName:"p"},"resolves / complete"),"\nthe ",Object(r.b)("inlineCode",{parentName:"p"},"data")," key on ",Object(r.b)("inlineCode",{parentName:"p"},"payload")," contains the effect result.\nDefault root reducer implementation make ",Object(r.b)("em",{parentName:"p"},"pending")," ",Object(r.b)("inlineCode",{parentName:"p"},"false")," and fill the ",Object(r.b)("inlineCode",{parentName:"p"},"data")," key with ",Object(r.b)("inlineCode",{parentName:"p"},"payload.data")," from action."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"FAILURE"))),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"interface FailureAction {\n  type: 'FAILURE'\n  payload: any\n  meta: Record<string, any>\n}\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"FAILURE")," action is dispatched when your ",Object(r.b)("strong",{parentName:"p"},"effect")," ",Object(r.b)("em",{parentName:"p"},"rejects / error"),"\nthe ",Object(r.b)("inlineCode",{parentName:"p"},"payload")," key on action contains the error generated from effect.\nDefault root reducer implementation make ",Object(r.b)("em",{parentName:"p"},"pending")," ",Object(r.b)("inlineCode",{parentName:"p"},"false")," and fill the ",Object(r.b)("inlineCode",{parentName:"p"},"error")," key with payload from action."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"UPDATE_DATA"))),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"interface UpdateDataAction {\n  type: 'UPDATE_DATA'\n  payload: any\n}\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"UPDATE_DATA")," action is dispatched from default action creator ",Object(r.b)("inlineCode",{parentName:"p"},"updateData"),".\nDefault root reducer implementation set the ",Object(r.b)("inlineCode",{parentName:"p"},"payload")," as new data."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"CANCEL"))),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"interface CancelAction {\n  type: 'CANCEL'\n  payload: any\n}\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"CANCEL")," action is dispatched from default action creator ",Object(r.b)("inlineCode",{parentName:"p"},"cancel"),".\nDefault root reducer implementation set the ",Object(r.b)("inlineCode",{parentName:"p"},"pending")," to ",Object(r.b)("inlineCode",{parentName:"p"},"false"),"."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"CLEAN"))),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"interface CancelAction {\n  type: 'CLEAN'\n  payload: any\n}\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"CLEAN")," action is dispatched from default action creator ",Object(r.b)("inlineCode",{parentName:"p"},"clean"),".\nDefault root reducer implementation set reset ",Object(r.b)("inlineCode",{parentName:"p"},"pending"),", ",Object(r.b)("inlineCode",{parentName:"p"},"data")," and ",Object(r.b)("inlineCode",{parentName:"p"},"error")," to\ndefault state:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"{\n  pending: false,\n  data: null,\n  error: null,\n}\n")),Object(r.b)("p",null,"In addition when your RjObject is initialized the ",Object(r.b)("strong",{parentName:"p"},"INIT")," action is also dispatched."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"interface InitAction {\n  type: 'INIT'\n}\n")),Object(r.b)("p",null,"Finally the last RocketJump core action is the ",Object(r.b)("inlineCode",{parentName:"p"},"RUN")," action.\nDispathed when the ",Object(r.b)("strong",{parentName:"p"},"effect")," is triggered."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"interface RunAction {\n  type: 'RUN',\n  payload: {\n    params: any[]\n  },\n  meta: Record<string, any>\n}\n")),Object(r.b)("p",null,"Default root reducer implementation doesn't listen to this action."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"INIT"),", ",Object(r.b)("strong",{parentName:"p"},"RUN"),", ",Object(r.b)("strong",{parentName:"p"},"CANCEL"),", ",Object(r.b)("strong",{parentName:"p"},"CLEAN"),", ",Object(r.b)("strong",{parentName:"p"},"PENDING"),", ",Object(r.b)("strong",{parentName:"p"},"SUCCESS"),", ",Object(r.b)("strong",{parentName:"p"},"FAILURE"),"\nand ",Object(r.b)("strong",{parentName:"p"},"UPDATE_DATA")," action types are all export from ",Object(r.b)("inlineCode",{parentName:"p"},"'react-rocketjump'")," module:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"import {\n  INIT,\n  RUN,\n  CANCEL,\n  CLEAN,\n  PENDING,\n  SUCCESS,\n  FAILURE,\n  UPDATE_DATA\n} from 'react-rocketjump'\n")),Object(r.b)("p",null,"We call the reducer under the ",Object(r.b)("inlineCode",{parentName:"p"},"root")," key the ",Object(r.b)("strong",{parentName:"p"},"root reducer"),", you can extend the root reducer or add others reducers under specific keys."),Object(r.b)("p",null,"You can find reducer under ",Object(r.b)("inlineCode",{parentName:"p"},"reducer")," property in your RjObject."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"const obj = rj(() => Promise.resolve('Hello'))\nconst state = obj.reducer(undefined, { type: 'INIT' })\n")),Object(r.b)("h3",{id:"extending-root-reducer"},"Extending root reducer"),Object(r.b)("p",null,"Your can extend the root reducer using the ",Object(r.b)("inlineCode",{parentName:"p"},"reducer")," property in ",Object(r.b)("strong",{parentName:"p"},"rj")," constructor or the ",Object(r.b)("inlineCode",{parentName:"p"},"reducer")," mehtod when using ",Object(r.b)("strong",{parentName:"p"},"Builder")," syntax, ",Object(r.b)("a",{parentName:"p",href:"/"},"learn more about builder invocation vs function invocation"),"."),Object(r.b)("p",null,"This option should be a function with the old reducer as input and the new reducer as output."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js",metastring:"{12}","{12}":!0},"function counterReducer(state = { counter: 0 }, action) {\n  if (action.type === 'INCREMENT') {\n    return {\n      counter: state.counter + 1,\n    }\n  }\n  return state\n}\n\nrj({\n  effect: () => Promise.resolve('Hello'),\n  reducer: (baseRootReducer) => counterReducer,\n})\n")),Object(r.b)("p",null,"Tipically the ",Object(r.b)("inlineCode",{parentName:"p"},"reducer")," option is used when you want overwrite the default reducer or your want to change default behaviour."),Object(r.b)("p",null,"If your only needs is to add a new action handled by default reducer you can use the ",Object(r.b)("inlineCode",{parentName:"p"},"composeReducer")," option."),Object(r.b)("p",null,"This option should be a reducer with the same shape of default reducer and it's used to ",Object(r.b)("em",{parentName:"p"},"compose")," your reducer."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js",metastring:"{3-11}","{3-11}":!0},"rj({\n  effect: () => Promise.resolve('Hello'),\n  composeReducer: (state, action) => {\n    if (action.type === 'APPEND' && state.data) {\n      return {\n        ...state,\n        data: state.data.concat(action.payload)\n      }\n    }\n    return state\n  }\n})\n")),Object(r.b)("p",null,"The final reducer has the default reducer plus can handle the ",Object(r.b)("strong",{parentName:"p"},"APPEND")," action type."),Object(r.b)("h3",{id:"adding-new-reducers"},"Adding new reducers"),Object(r.b)("p",null,"You can adding new reducers next to root reducer using ",Object(r.b)("inlineCode",{parentName:"p"},"combineReducers")," option, this option must be an object indexed by the reducers you want to add, under the hood the old but good redux ",Object(r.b)("em",{parentName:"p"},"combineReducers")," is used."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js",metastring:"{19-22}","{19-22}":!0},"function counterReducer(state = 0, action) {\n  if (action.type === 'INCREMENT') {\n    return {\n      counter: state + 1,\n    }\n  }\n  return state\n}\n\nfunction lastSuccessAtReducer(state = null, action) {\n  if (action.type === 'SUCCESS') {\n    return new Date().getTime()\n  }\n  return state\n}\n\nrj({\n  effect: () => Promise.resolve('Hello'),\n  combinerReducers: {\n    counter: counterReducer,\n    lastSuccessAt: lastSuccessAtReducer\n  }\n})\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Reducers provided in combinerReducers still has access to ALL actions.")))}l.isMDXComponent=!0}}]);